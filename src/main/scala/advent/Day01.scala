package advent

// this is generated by chatgpt and modified slightly to be compilable

import zio._
import scala.util.Try

object Day01 {

  def solve: ZIO[Console, Throwable, String] =
    for {
      // read the input data from a file
      input <- readInputFile("src/main/resources/input_day1_1.txt")
      // parse the input data
      parsedInput = parseInput(input)
      // solve the first part of the problem
      part1 = solvePart1(parsedInput)
      // solve the second part of the problem
      part2 = solvePart2(parsedInput)
      // print the results to the console
    } yield s"$part1, $part2"

  def readInputFile(filename: String): ZIO[Any, Throwable, String] =
    // read the contents of the file and return a ZIO effect
    ZIO.fromTry(Try(scala.io.Source.fromFile(filename).mkString))

  def parseInput(input: String): Array[Array[Int]] =
    // parse the input string and return a sequence of integers
    // for day 2 this is the score for each round
    input.split("\n\n").map(_.split("\n").map(_.toInt))

  def solvePart1(input: Array[Array[Int]]): Int =
    // solve the first part of the problem and return the result
    input.maxBy(_.sum).sum

  def solvePart2(input: Array[Array[Int]]): Int =
    // solve the second part of the problem and return the result
    input
      .sortBy(_.reduce(_ + _))
      .reverse
      .take(3)
      .map(_.sum)
      .sum
}
